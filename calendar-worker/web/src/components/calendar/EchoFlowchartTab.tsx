import React, { useEffect } from 'react';

interface EchoFlowchartTabProps {
  flowchart: string;
  onBackToDetails: () => void;
  onResetEcho: () => void;
}

export const EchoFlowchartTab: React.FC<EchoFlowchartTabProps> = ({
  flowchart,
  onBackToDetails,
  onResetEcho
}) => {
  // Render Mermaid flowchart when it changes
  useEffect(() => {
    const renderFlowchart = async () => {
      if (!flowchart || !(window as any).mermaid) return;
      
      console.log('🔄 Flowchart useEffect triggered, flowchart:', flowchart);
      console.log('🌐 Mermaid available:', !!(window as any).mermaid);
      console.log('🚦 Mermaid ready flag:', !!(window as any).mermaidReady);
      
      if (!(window as any).mermaidReady) {
        console.log('⏳ Waiting for Mermaid to be ready...');
        return;
      }
      
      console.log('🎨 Rendering Mermaid flowchart...');
      
      const container = document.getElementById('mermaid-flowchart');
      if (!container) {
        console.log('❌ Container not found');
        return;
      }
      
      console.log('📦 Container element:', container);
      
      // Clear previous content
      container.innerHTML = '';
      
      try {
        // Render the flowchart - Mermaid.render() returns a Promise
        const renderResult = await (window as any).mermaid.render('mermaid-flowchart', flowchart);
        console.log('🎨 Mermaid render result:', renderResult);
        
        if (!renderResult || !renderResult.svg) {
          throw new Error('Mermaid render failed - no SVG returned');
        }
        
        const { svg } = renderResult;
        console.log('✅ Mermaid render successful, SVG length:', svg.length);
        console.log('🎨 SVG content preview:', svg.substring(0, 200) + '...');
        
        // Insert the SVG
        container.appendChild(document.createRange().createContextualFragment(svg));
        
        console.log('🎯 SVG inserted, container children:', container.children.length);
        console.log('🎯 Container innerHTML length:', container.innerHTML.length);
        console.log('🎯 Container first child:', container.firstChild);
        
        // Force a reflow to ensure proper rendering
        container.style.display = 'none';
        container.offsetHeight; // Force reflow
        container.style.display = 'block';
        
        // Find the inserted SVG and fix its sizing
        const svgElement = container.querySelector('svg');
        if (svgElement) {
          console.log('🎯 SVG element found:', svgElement);
          
          // Remove restrictive max-width and ensure full width
          svgElement.style.maxWidth = 'none';
          svgElement.style.width = '100%';
          svgElement.style.height = 'auto';
          svgElement.style.minHeight = '300px';
          
          // Ensure the SVG is visible
          svgElement.style.display = 'block';
          svgElement.style.overflow = 'visible';
          
          console.log('🎯 SVG dimensions:', svgElement.getBoundingClientRect());
          console.log('🎯 SVG styles:', window.getComputedStyle(svgElement));
        }
        
      } catch (error: any) {
        console.error('❌ Mermaid render error:', error);
        container.innerHTML = `<div style="color: red; padding: 20px; text-align: center;">Error rendering flowchart: ${error.message}</div>`;
      }
    };

    renderFlowchart();
  }, [flowchart]);

  return (
    <div className="px-4 py-2">
      <div className="mb-2">
        <h3 className="text-lg font-medium text-gray-900 mb-1">Event Echo Flowchart</h3>
        <p className="text-sm text-gray-600">
          This flowchart shows the sequence of events including follow-ups generated by AI.
        </p>
      </div>
      
      <div 
        id="mermaid-flowchart" 
        className="mermaid"
        style={{
          minHeight: '400px',
          width: '100%',
          display: 'block',
          overflow: 'visible',
          backgroundColor: 'white',
          padding: '20px',
          border: '1px solid #e5e7eb',
          borderRadius: '8px',
          marginTop: '16px'
        }}
      >
        {!flowchart && (
          <div style={{ 
            textAlign: 'center', 
            padding: '40px 20px',
            color: '#6b7280',
            fontSize: '14px'
          }}>
            Generate echo events to see the flowchart here
          </div>
        )}
      </div>
      
      <div className="flex justify-between mt-4">
        <button
          type="button"
          onClick={onBackToDetails}
          className="px-3 py-1.5 text-sm font-medium text-gray-700 border border-gray-300 rounded-md hover:bg-gray-50"
        >
          Back to Details
        </button>
        
        <button
          type="button"
          onClick={onResetEcho}
          className="px-3 py-1.5 text-sm font-medium text-red-600 border border-red-600 rounded-md hover:bg-red-50"
        >
          Reset Echo
        </button>
      </div>
    </div>
  );
};
